class heap{
    int n = 0;
    vector<int>a;
public:
    heap(){
        a.push_back(-1);
    }
    void push(int val){
        n = n+1;
        a.push_back(val);
        int i = n;
        while(i > 1){
            int parent = i/2;
            if(a[parent] < a[i]){
                swap(a[parent],a[i]);
                i = parent;
            }
            else{
                return;
            }
        }
    }
    int top(){
        return a[1];
    }
    int size(){
        return n;
    }
    void pop(){
        a[1] = a[n];
        n=n-1;
        a.pop_back();
        int i = 1 , larger = -1;
        while(i < n){
            int left = 2*i;
            int right = 2*i+1;
            if(left <= n && right <= n){
                if(a[left]<a[right])larger = right;
                else larger = left;
            }
            else if(left <=n) {
                larger = left;
            }
            else return;
            if(a[larger] > a[i]){
                swap(a[larger],a[i]);
                i = larger;
            }
            else{
                return;
            }
        }
    }
};